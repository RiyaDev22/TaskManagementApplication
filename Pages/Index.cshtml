@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!--CSS Libraries-->
<link href="https://cdn.datatables.net/1.13.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.bootstrap5.min.css">
<!--Tagify CSS-->
<link href="/css/tagify.css" rel="stylesheet">


<div class="d-flex justify-content-between align-items-center mb-3">
    <!--Add title to the top left of the screen-->
    <h2>Tasks</h2>
    <!--Create the "Add Task" button at the top right of the screen-->
    <button id="addTaskButton" class="btn btn-primary">Add Task</button>
</div>

<!--Add/Edit Task sidebar-->
<div id="addTaskSidebar" class="offcanvas offcanvas-end" tabindex="-1" aria-labelledby="addTaskSidebarLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="addTaskSidebarLabel">Add Task</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <form id="addTaskForm">
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label for="TaskTitle" class="form-label">Task Title *</label>
                <input type="text" class="form-control" id="TaskTitle" name="Title" placeholder="Task Title" required>
            </div>
            <div class="mb-3">
                <label for="TaskDescription" class="form-label">Task Description *</label>
                <textarea class="form-control" id="TaskDescription" name="Description" placeholder="Task Description" required></textarea>
            </div>
            <div class="mb-3">
                <label for="DueDate" class="form-label">Due Date *</label>
                <input type="date" class="form-control" id="DueDate" name="DueDate" required min="">
            </div>
            <div class="mb-3">
                <label for="AssigneeId" class="form-label">Task Assigned To *</label>
                <select id="AssigneeId" name="AssigneeId" class="form-select" required>
                    <option value="">Select Assignee</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="ReviewerId" class="form-label">Task Reviewer *</label>
                <select id="ReviewerId" name="ReviewerId" class="form-select" required>
                    <option value="">Select Reviewer</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="Status" class="form-label">Status *</label>
                <select class="form-select" id="Status" name="Status" required>
                    <option value="New">New</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="TaskType" class="form-label">Task Type *</label>
                <select class="form-select" id="TaskType" name="TaskType" required>
                    <option value="Milestone">Milestone</option>
                    <option value="Compliance">Compliance</option>
                    <option value="Task">Task</option>
                </select>
            </div>
            <button type="submit" id="addEditTaskButton" class="btn btn-success">Create</button>
        </form>
    </div>
</div>

<!--Create the tasks table and display it-->
<table id="taskTable" class="table table-striped">
    <thead>
        <tr>
            <th>Task Type</th>
            <th>Title</th>
            <th>Description</th>
            <th>Assignee</th>
            <th>Reviewer</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
</table>

<!--Javascript Libraries-->d
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.5/js/dataTables.bootstrap5.min.js"></script>
<script src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"></script>
<script src="https://cdn.datatables.net/responsive/2.4.1/js/responsive.bootstrap5.min.js"></script>
<!--Tagify JS-->
<script src="/js/tagify.js"></script>

<!--Fetch data from OnGetTasks() and store into the table-->
<script>
    $(document).ready(function() {
        $('#taskTable').DataTable({
            ajax: {
                url: "/?handler=Tasks" //Ajax URL to fetch data
            },
            columns: [
                { data: "taskType" },
                { data: "title" },
                { data: "description" },
                { data: "assigneeName" },
                { data: "reviewerName" },
                { data: "dueDate" },
                { data: "status" },
                { data: "actions" }
            ],
            responsive: true //Enable responsive behavior
        });

        //Adjust columns when the window is resized
        $(window).on('resize', function () {
            table.columns.adjust(); //Recalculate column widths
        });
    });
</script>

<!--Fetch users and populate Assignee and Reviewer dropdown lists-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        //Fetch Assignees
        fetch(`/Index?handler=Assignees`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to fetch assignees.");
                }
                return response.json();
            })
            .then(assignees => {
                const assigneeDropdown = document.getElementById("AssigneeId");

                assignees.forEach(user => {
                    const option = document.createElement("option");
                    option.value = user.id;
                    //Combine name and email in plain text
                    option.textContent = `${user.name} (${user.email})`;
                    assigneeDropdown.appendChild(option);
                });
            })
            .catch(error => console.error("Error fetching assignees:", error));

        //Fetch Reviewers
        fetch(`/Index?handler=Reviewers`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to fetch reviewers.");
                }
                return response.json();
            })
            .then(reviewers => {
                const reviewerDropdown = document.getElementById("ReviewerId");

                reviewers.forEach(user => {
                    const option = document.createElement("option");
                    option.value = user.id;
                    //Combine name and email in plain text
                    option.textContent = `${user.name} (${user.email})`;
                    reviewerDropdown.appendChild(option);
                });
            })
            .catch(error => console.error("Error fetching reviewers:", error));
    });
</script>

<!--Add Task" button functionality: Display the Add Task sidebar-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        //Initialise Bootstrap Offcanvas
        const addTaskSidebar = new bootstrap.Offcanvas(document.getElementById("addTaskSidebar"));
        const addTaskButton = document.getElementById("addTaskButton");

        //Show sidebar when the "Add Task" button is clicked
        addTaskButton.addEventListener("click", function () {
            //Reset the form fields
            const addTaskForm = document.getElementById("addTaskForm");
            addTaskForm.reset();

            //Reset the sidebar title
            document.getElementById("addTaskSidebarLabel").textContent = "Add Task";

            //Reset the button label and functionality
            const addEditTaskButton = document.getElementById("addEditTaskButton");
            addEditTaskButton.textContent = "Create";
            addEditTaskButton.removeAttribute("data-task-id");

            //Show the sidebar
            addTaskSidebar.show();
        });
    });
</script>

<!--Create button functionality-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        //Reference the existing sidebar instance
        const addTaskForm = document.getElementById("addTaskForm");

        addTaskForm.addEventListener("submit", function (event) {
            event.preventDefault(); //Prevent default form submission
            
            
            const dueDateInput = document.getElementById("DueDate").value;
            const dueDate = new Date(dueDateInput);
            const today = new Date();
            today.setHours(0, 0, 0, 0); //Ensure we only compare the date part

            if (dueDate < today) {
                alert("Due Date must be today or in the future.");
                event.preventDefault(); //Prevent form submission
                return;
            }

            const taskData = {
                Title: document.getElementById("TaskTitle").value,
                Description: document.getElementById("TaskDescription").value,
                DueDate: document.getElementById("DueDate").value,
                AssigneeId: parseInt(document.getElementById("AssigneeId").value, 10),
                ReviewerId: parseInt(document.getElementById("ReviewerId").value, 10),
                Status: document.getElementById("Status").value,
                TaskType: document.getElementById("TaskType").value,
            };

            //Retrieve the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('/Index?handler=CreateTask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token,
                },
                body: JSON.stringify(taskData),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server responded with status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    alert("Task added successfully!");

                    //Close the sidebar using the existing instance
                    const addTaskSidebar = bootstrap.Offcanvas.getInstance(document.getElementById("addTaskSidebar"));
                    if (addTaskSidebar) {
                       addTaskSidebar.hide();
                    }

                    //Update the table
                    const taskTable = $('#taskTable').DataTable();
                    taskTable.ajax.reload(null, false); //Reload table without resetting the paging

                    //Clear the form
                    addTaskForm.reset();
                } else {
                    alert(result.message || "Failed to add task.");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Error adding task. Please try again.");
            });
        });
    });
</script>

<!--Edit button functionality: Display the Edit Task sidebar-->
<script>
    $(document).on('click', '.edit-task', function () {
        const taskId = $(this).data('task-id'); //Get the Task ID
        console.log("Edit Task ID:", taskId); //For debugging

        //Use the row() method to retrieve data directly from the DataTable
        const table = $('#taskTable').DataTable();
        const rowData = table.rows().data().toArray().find(row => row.id == taskId); //Match on 'id'
        console.log("rowData: ", rowData); //For debugging

        if (rowData) {
            //Populate the form fields with the row data
            document.getElementById("TaskTitle").value = rowData.title || '';
            document.getElementById("TaskDescription").value = rowData.description || '';
            //Ensure the due date is properly formatted for <input type="date">
            if (rowData.dueDate) {
                const formattedDate = new Date(rowData.dueDate).toISOString().split("T")[0];
                document.getElementById("DueDate").value = formattedDate; //Format as YYYY-MM-DD
            } else {
                document.getElementById("DueDate").value = ''; //Reset if no due date
            }
            document.getElementById("AssigneeId").value = rowData.assigneeId || '';
            document.getElementById("ReviewerId").value = rowData.reviewerId || '';
            document.getElementById("Status").value = rowData.status || '';
            document.getElementById("TaskType").value = rowData.taskType || '';

            //Open the sidebar
            const editTaskSidebar = bootstrap.Offcanvas.getInstance(document.getElementById("addTaskSidebar"));
            if (editTaskSidebar) {
                editTaskSidebar.show();
            } else {
                const newTaskSidebar = new bootstrap.Offcanvas(document.getElementById("addTaskSidebar"));
                newTaskSidebar.show();
            }

            //Update the sidebar title for editing
            document.getElementById("addTaskSidebarLabel").textContent = "Edit Task";

            //Update the button text to "Update"
            const addEditTaskButton = document.getElementById("addEditTaskButton");
            addEditTaskButton.textContent = "Update";
            //Set the data-task-id attribute on the Update button
            addEditTaskButton.setAttribute("data-task-id", taskId); //Set the taskId here
            console.log("Update button data-task-id set to:", taskId);
        } else {
            alert("Failed to load task data from the table.");
        }
    });
</script>

<!--Update button functionality-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const addEditTaskButton = document.getElementById("addEditTaskButton");

        addEditTaskButton.addEventListener("click", function (event) {
            if (addEditTaskButton.textContent === "Update") {
                event.preventDefault(); //Prevent the default form submission

                //Gather updated task data from the form fields
                const taskId = addEditTaskButton.getAttribute("data-task-id");

                const taskData = {
                    Id: parseInt(taskId, 10), //Include the task ID for the update
                    Title: document.getElementById("TaskTitle").value,
                    Description: document.getElementById("TaskDescription").value,
                    DueDate: document.getElementById("DueDate").value,
                    AssigneeId: parseInt(document.getElementById("AssigneeId").value, 10),
                    ReviewerId: parseInt(document.getElementById("ReviewerId").value, 10),
                    Status: document.getElementById("Status").value,
                    TaskType: document.getElementById("TaskType").value,
                };

                console.log("Task ID:", taskId); //Log task ID
                console.log("Task Data:", taskData); //Log task data being sent

                //Send the updated task data to the server
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(`/Index?handler=UpdateTask`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token,
                    },
                    body: JSON.stringify(taskData),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server responded with status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result => {
                    if (result.success) {
                        alert("Task updated successfully!");

                        //Locate the existing row in the DataTable by Task ID
                        const table = $('#taskTable').DataTable();
                        const rowIndex = table.rows().data().toArray().findIndex(row => row.id == taskId);

                        if (rowIndex !== -1) {
                            table.row(rowIndex).remove();
                            const updatedRowData = {
                                id: taskData.Id,
                                title: taskData.Title,
                                description: taskData.Description,
                                dueDate: taskData.DueDate,
                                assigneeName: document.querySelector(`#AssigneeId option[value='${taskData.AssigneeId}']`).innerText,
                                reviewerName: document.querySelector(`#ReviewerId option[value='${taskData.ReviewerId}']`).innerText,
                                status: taskData.Status,
                                taskType: taskData.TaskType,
                                actions: `<button class='btn btn-sm btn-primary edit-task' data-task-id='${taskData.Id}'>Edit</button>`,
                            };

                            //Update the row in the DataTable
                            table.row(rowIndex).data(updatedRowData).draw(false); //Update and redraw the row
                            table.ajax.reload(null, false);

                        }

                        //Close the sidebar
                        const editTaskSidebar = bootstrap.Offcanvas.getInstance(document.getElementById("addTaskSidebar"));
                        if (editTaskSidebar) {
                            editTaskSidebar.hide();
                        }
                    } else {
                        alert(result.message || "Failed to update task.");
                    }
                })
                .catch(error => {
                    console.error("Error updating task:", error);
                    alert("Error updating task. Please try again.");
                });
            }
        });
    });
</script>

<!--Delete button functionality-->
<script>
        $(document).on('click', '.delete-task', function () {
        const taskId = $(this).data('task-id'); //Get the Task ID
        console.log("Delete Task ID:", taskId); //For debugging

        if (confirm("Are you sure you want to delete this task?")) {
            //Send a delete request to the server
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/Index?handler=DeleteTask`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token,
                },
                body: JSON.stringify({ Id: taskId }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server responded with status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    alert("Task deleted successfully!");

                    //Remove the row from the DataTable
                    const table = $('#taskTable').DataTable();
                    const rowIndex = table.rows().data().toArray().findIndex(row => row.id == taskId);
                    if (rowIndex !== -1) {
                        table.row(rowIndex).remove().draw(false); //Remove the row and redraw the table
                    }
                    table.ajax.reload(null, false);
                } else {
                    alert(result.message || "Failed to delete task.");
                }

            })
            .catch(error => {
                console.error("Error deleting task:", error);
                alert("Error deleting task. Please try again.");
            });
        }
    });

</script>